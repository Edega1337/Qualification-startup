const fs = require("fs");
const path = require("path");
const { v4: uuidv4 } = require("uuid");
require("dotenv").config({ path: path.join(__dirname, "..", ".env") });
const { createUser, getUser } = require("../services/services.js");
const { activate, logoutUser, refreshFunc, getUserInfo, loadAdUser, deleteAdService, updateUserProfile } = require("../services/user-service");
const { searchAds } = require("../services/search-service.js")
const { getProfileUsers } = require("../services/profile-view");
const AdService = require("../services/upload-service");


const handleErrorResponse = (res, error) => {
  const statusCode = error.statusCode || error.status || 500;
  const message = error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

  res.status(statusCode).send({ message });
};

const setRefreshTokenCookie = (res, token) => {
  res.cookie("refreshToken", token, {
    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
    httpOnly: true,
  });
};

const registerUser = async (req, res) => {
  try {
    const { data } = await createUser(req.body);
    setRefreshTokenCookie(res, data.refreshToken);
    res.status(201).send({ accessToken: data.accessToken });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    handleErrorResponse(res, error);
  }
};

const authUser = async (req, res) => {
  try {
    const { data } = await getUser(req.body);
    setRefreshTokenCookie(res, data.refreshToken);
    res.status(200).send({ accessToken: data.accessToken });
  } catch (error) {
    handleErrorResponse(res, error);
  }
};

const logout = async (req, res) => {
  try {
    const { refreshToken } = req.cookies;
    await logoutUser(refreshToken);
    res.clearCookie("refreshToken");
    res.status(200).send({ message: "Logout successful" });
  } catch (error) {
    handleErrorResponse(res, error);
  }
};

const activateUser = async (req, res) => {
  try {
    const activationLink = req.params.link;
    await activate(activationLink);
    res.redirect(process.env.CLIENT_URL);
  } catch (error) {
    handleErrorResponse(res, error);
  }
};

const refresh = async (req, res) => {
  try {
    const { refreshToken } = req.cookies;
    const resultAccessToken = await refreshFunc(refreshToken);
    res.status(200).send(resultAccessToken);
  } catch (error) {
    handleErrorResponse(res, error);
  }
};

const currentUser = async (req, res) => {
  try {
    const { id } = req.user;
    const resultSearch = await getUserInfo(id);
    res.status(200).send(resultSearch);
  } catch (error) {
    handleErrorResponse(res, error);
  }
};

const profileUsers = async (req, res) => {
  try {
    const login = req.params.login;
    const resultSearchUsers = await getProfileUsers(login);
    res.status(200).send(resultSearchUsers);
  } catch (error) {
    handleErrorResponse(res, error);
  }
};


const editProfileUser = async (req, res) => {
  try {
    const newProfileData = {};
    let avatarReceived = false;

    for await (const part of req.parts()) {
      if (part.file) {
        // –§–∞–π–ª ‚Äî –Ω–µ–≤–∞–∂–Ω–æ –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–µ
        avatarReceived = true;
        console.log("üì∏ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω:", part.fieldname, part.filename);

        const uniqueId = uuidv4();
        const ext = path.extname(part.filename);
        const uniqueFileName = `${uniqueId}${ext}`;
        const uploadDir = path.join(__dirname, "../uploads", "avatars");

        if (!fs.existsSync(uploadDir)) {
          fs.mkdirSync(uploadDir, { recursive: true });
        }

        const filePath = path.join(uploadDir, uniqueFileName);
        const writeStream = fs.createWriteStream(filePath);

        await part.file.pipe(writeStream);

        // üìå –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫–∞–∫ avatarUrl ‚Äî –ö–û–ù–ö–†–ï–¢–ù–û –≠–¢–û –ü–û–õ–ï
        newProfileData.avatarUrl = `/uploads/avatars/${uniqueFileName}`;
      } else {
        // –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        newProfileData[part.fieldname] = part.value;
      }
    }

    if (!avatarReceived) {
      console.log("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω");
    }

    console.log("üì• –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:", newProfileData);

    const updatedProfile = await updateUserProfile(req.user.id, newProfileData);

    res.status(200).send({
      message: "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
      profile: updatedProfile,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    res.status(500).send({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è", error });
  }
};



const deleteAdController = async (req, res) => {
  try {
    const adId = req.params.id;
    const userId = req.user.id;

    const result = await deleteAdService(userId, adId);

    res.status(200).json({
      message: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
      result,
    });
  } catch (error) {
    handleErrorResponse(res, error);
  }
};

const loadAd = async (req, res) => {
  try {
    const parts = [];
    const adData = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    let uploadedFileData = null; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
    const accessToken = req.headers.authorization;

    for await (const part of req.parts()) {
      if (part.file) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        const uniqueId = uuidv4();

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const ext = path.extname(part.filename);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const uniqueFileName = `${uniqueId}${ext}`;
        const uploadDir = path.join(__dirname, '../uploads');

        // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(uploadDir)) {
          fs.mkdirSync(uploadDir);
        }

        const filePath = path.join(uploadDir, uniqueFileName);
        const writeStream = fs.createWriteStream(filePath);

        await part.file.pipe(writeStream); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        uploadedFileData = { fileName: uniqueFileName, path: filePath };

        console.log(`File saved as: ${filePath}`);
        parts.push({ fieldname: part.fieldname, fileName: uniqueFileName });
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        console.log(`${part.fieldname}: ${part.value}`);
        adData[part.fieldname] = part.value; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        parts.push({ fieldname: part.fieldname, value: part.value });
      }
    }
    console.log("adData, –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã —Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º", adData);
    const resultLoadAd = await AdService.saveAdData(adData, uploadedFileData.fileName, accessToken);

    // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', resultLoadAd);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.status(200).send({
      message: 'Ad successfully received',
    });
  } catch (error) {
    console.error('Error processing form:', error);
    res.status(500).send({ message: 'Error processing form', error });
  }
};

const searchAd = async (req, res) => {
  try {
    const ads = await searchAds(req.query);
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:", ads);
    res.send(ads);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", error);
    reply.status(500).send({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π" });
  }
}



module.exports = {
  registerUser,
  authUser,
  logout,
  activateUser,
  refresh,
  currentUser,
  profileUsers,
  loadAd,
  editProfileUser,
  deleteAdController,
  searchAd
};